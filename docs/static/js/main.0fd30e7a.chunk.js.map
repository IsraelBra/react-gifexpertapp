{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAkB/C,OACI,oCACI,0BAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BC,QAAQC,IAAI,kBACZV,GAAe,SAAAW,GAAU,OAAKT,GAAL,mBAAoBS,OAC7CR,EAAc,OAQV,2BACIS,KAAK,OACLC,MAAQX,EACRY,SArBU,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,a,uBCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MACI,CACIC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT3B,kBAeZM,GAfY,4CAAH,sDCkBLO,EAfK,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAC3B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KC+CFO,EAhDC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA4BtC,OAtBAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAM1B,CAAEpB,IAQEqB,EDfyBK,CAAc1B,GAAjCa,EAViB,EAUvBN,KAAca,EAVS,EAUTA,QAGrB,OACI,oCACI,wBAAIJ,UAAU,qCAAsChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAab,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAOjB,EAAIC,IACND,UEXlBkB,EA1BM,WAAM,MAEa5C,mBAAS,CAAC,gBAFvB,mBAEhBU,EAFgB,KAEJX,EAFI,KAMvB,OACI,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BACMW,EAAWe,KAAK,SAACT,GACX,OAEI,kBAAC,EAAD,CAAS2B,IAAM3B,EACXA,SAAWA,UCfvC6B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.0fd30e7a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) { \r\n            console.log('Submit success');\r\n            setCategories( categories => [inputValue, ...categories] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={ handleSubmit }>\r\n                \r\n                <input \r\n                    type='text'\r\n                    value={ inputValue }\r\n                    onChange= { handleInputChange }\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=VG3mesueP3MW3Y7gdVKGaVzlegYlBXiC`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return (\r\n            {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        )\r\n    } );\r\n    // console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    id: PropTypes.string,\r\n    title: PropTypes.string,\r\n    url: PropTypes.string,\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    // const [count, setCount] = useState(0);\r\n    // const [images, setImages] = useState([]);\r\n    // // Con lo siguiente le indicamos que solo queremos renderizar unica vez\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         // .then( imgs => setImages( imgs ) );\r\n    //         .then( setImages );\r\n    // }, [ category ]);\r\n\r\n    const {data: images, loading} = useFetchGifs( category );\r\n\r\n    // getGifs();\r\n    return (\r\n        <>  \r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            {/* { loading ? 'Cargando...' : 'Cargado' } */}\r\n            {/* <div className=\"card-grid\" >\r\n                { \r\n                    // images.map( ( { id, title } ) => <li key={ id } >{ title }</li>) \r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div> */}\r\n            <div className=\"card-grid\" >\r\n                { \r\n                    // images.map( ( { id, title } ) => <li key={ id } >{ title }</li>) \r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                // setTimeout(() => {\r\n                    \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false,\r\n                    })\r\n                    \r\n                // }, 3000);\r\n\r\n            });\r\n    }, [ category ]);\r\n\r\n    // setTimeout (() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false,\r\n    //     }) \r\n    // }, 3000);\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n    // const handleAdd = () => {\r\n    //   setCategories([...categories, categories]);\r\n    // }\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={ setCategories } />\r\n        <hr />\r\n        <ol>\r\n            { categories.map( (category) => {\r\n                    return (\r\n                        // <li key={  category }>{ category }</li>\r\n                        <GifGrid key={ category } \r\n                            category={ category } \r\n                        />\r\n                    )\r\n                }) \r\n            }\r\n        </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}